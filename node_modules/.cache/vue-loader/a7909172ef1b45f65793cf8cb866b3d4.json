{"remainingRequest":"D:\\2021graduate\\graduation\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\2021graduate\\graduation\\node_modules\\mint-ui\\packages\\tab-container\\src\\tab-container.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"D:\\2021graduate\\graduation\\node_modules\\mint-ui\\packages\\tab-container\\src\\tab-container.vue","mtime":1611497133402},{"path":"D:\\2021graduate\\graduation\\node_modules\\css-loader\\dist\\cjs.js","mtime":1594033219529},{"path":"D:\\2021graduate\\graduation\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1594033220124},{"path":"D:\\2021graduate\\graduation\\node_modules\\postcss-loader\\src\\index.js","mtime":1594033219961},{"path":"D:\\2021graduate\\graduation\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1594033213228},{"path":"D:\\2021graduate\\graduation\\node_modules\\vue-loader\\lib\\index.js","mtime":1594033220124}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKQGNvbXBvbmVudC1uYW1lc3BhY2UgbWludCB7CiAgQGNvbXBvbmVudCB0YWItY29udGFpbmVyIHsKICAgIG92ZXJmbG93OiBoaWRkZW47CiAgICBwb3NpdGlvbjogcmVsYXRpdmU7CgogICAgQGRlc2NlbmRlbnQgd3JhcCB7CiAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICB9CgogICAgLnN3aXBlLXRyYW5zaXRpb24gewogICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMTUwbXMgZWFzZS1pbi1vdXQ7CiAgICB9CiAgfQp9Cg=="},{"version":3,"sources":["tab-container.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAkBA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"tab-container.vue","sourceRoot":"node_modules/mint-ui/packages/tab-container/src","sourcesContent":["<template>\n  <div\n    @touchstart=\"startDrag\"\n    @mousedown=\"startDrag\"\n    @touchmove=\"onDrag\"\n    @mousemove=\"onDrag\"\n    @mouseup=\"endDrag\"\n    @touchend=\"endDrag\"\n    class=\"mint-tab-container\">\n    <div\n      ref=\"wrap\"\n      class=\"mint-tab-container-wrap\">\n      <slot></slot>\n    </div>\n  </div>\n</template>\n\n<style lang=\"css\">\n  @component-namespace mint {\n    @component tab-container {\n      overflow: hidden;\n      position: relative;\n\n      @descendent wrap {\n        display: flex;\n      }\n\n      .swipe-transition {\n        transition: transform 150ms ease-in-out;\n      }\n    }\n  }\n</style>\n\n<script>\nimport { once } from 'mint-ui/src/utils/dom';\nimport arrayFindIndex from 'array-find-index';\n\n/**\n * mt-tab-container\n * @desc 面板，搭配 tab-container-item 使用\n * @module components/tab-container\n *\n * @param {number|string} [value] - 当前激活的 tabId\n *\n * @example\n * <mt-tab-container v-model=\"selected\">\n *   <mt-tab-container-item id=\"1\"> 内容A </mt-tab-container-item>\n *   <mt-tab-container-item id=\"2\"> 内容B </mt-tab-container-item>\n *   <mt-tab-container-item id=\"3\"> 内容C </mt-tab-container-item>\n * </mt-tab-container>\n */\nexport default {\n  name: 'mt-tab-container',\n\n  props: {\n    value: {},\n    swipeable: Boolean\n  },\n\n  data() {\n    return {\n      start: { x: 0, y: 0 },\n      swiping: false,\n      activeItems: [],\n      pageWidth: 0,\n      currentActive: this.value\n    };\n  },\n\n  watch: {\n    value(val) {\n      this.currentActive = val;\n    },\n\n    currentActive(val, oldValue) {\n      this.$emit('input', val);\n      if (!this.swipeable) return;\n      const lastIndex = arrayFindIndex(this.$children,\n        item => item.id === oldValue);\n      this.swipeLeaveTransition(lastIndex);\n    }\n  },\n\n  mounted() {\n    if (!this.swipeable) return;\n\n    this.wrap = this.$refs.wrap;\n    this.pageWidth = this.wrap.clientWidth;\n    this.limitWidth = this.pageWidth / 4;\n  },\n\n  methods: {\n    swipeLeaveTransition(lastIndex = 0) {\n      if (typeof this.index !== 'number') {\n        this.index = arrayFindIndex(this.$children,\n          item => item.id === this.currentActive);\n        this.swipeMove(-lastIndex * this.pageWidth);\n      }\n\n      setTimeout(() => {\n        this.wrap.classList.add('swipe-transition');\n        this.swipeMove(-this.index * this.pageWidth);\n\n        once(this.wrap, 'webkitTransitionEnd', _ => {\n          this.wrap.classList.remove('swipe-transition');\n          this.wrap.style.webkitTransform = '';\n          this.swiping = false;\n          this.index = null;\n        });\n      }, 0);\n    },\n\n    swipeMove(offset) {\n      this.wrap.style.webkitTransform = `translate3d(${offset}px, 0, 0)`;\n      this.swiping = true;\n    },\n\n    startDrag(evt) {\n      if (!this.swipeable) return;\n      evt = evt.changedTouches ? evt.changedTouches[0] : evt;\n      this.dragging = true;\n      this.start.x = evt.pageX;\n      this.start.y = evt.pageY;\n    },\n\n    onDrag(evt) {\n      if (!this.dragging) return;\n      let swiping;\n      const e = evt.changedTouches ? evt.changedTouches[0] : evt;\n      const offsetTop = e.pageY - this.start.y;\n      const offsetLeft = e.pageX - this.start.x;\n      const y = Math.abs(offsetTop);\n      const x = Math.abs(offsetLeft);\n\n      swiping = !(x < 5 || (x >= 5 && y >= x * 1.73));\n      if (!swiping) return;\n      evt.preventDefault();\n\n      const len = this.$children.length - 1;\n      const index = arrayFindIndex(this.$children,\n        item => item.id === this.currentActive);\n      const currentPageOffset = index * this.pageWidth;\n      const offset = offsetLeft - currentPageOffset;\n      const absOffset = Math.abs(offset);\n\n      if (absOffset > len * this.pageWidth ||\n          (offset > 0 && offset < this.pageWidth)) {\n        this.swiping = false;\n        return;\n      }\n\n      this.offsetLeft = offsetLeft;\n      this.index = index;\n      this.swipeMove(offset);\n    },\n\n    endDrag() {\n      if (!this.swiping) return;\n      this.dragging = false;\n      const direction = this.offsetLeft > 0 ? -1 : 1;\n      const isChange = Math.abs(this.offsetLeft) > this.limitWidth;\n\n      if (isChange) {\n        this.index += direction;\n        const child = this.$children[this.index];\n        if (child) {\n          this.currentActive = child.id;\n          return;\n        }\n      }\n\n      this.swipeLeaveTransition();\n    }\n  }\n};\n</script>\n"]}]}