{"remainingRequest":"D:\\2021graduate\\graduation\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\2021graduate\\graduation\\node_modules\\mint-ui\\packages\\loadmore\\src\\loadmore.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"D:\\2021graduate\\graduation\\node_modules\\mint-ui\\packages\\loadmore\\src\\loadmore.vue","mtime":1611497133402},{"path":"D:\\2021graduate\\graduation\\node_modules\\css-loader\\dist\\cjs.js","mtime":1594033219529},{"path":"D:\\2021graduate\\graduation\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1594033220124},{"path":"D:\\2021graduate\\graduation\\node_modules\\postcss-loader\\src\\index.js","mtime":1594033219961},{"path":"D:\\2021graduate\\graduation\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1594033213228},{"path":"D:\\2021graduate\\graduation\\node_modules\\vue-loader\\lib\\index.js","mtime":1594033220124}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKQGNvbXBvbmVudC1uYW1lc3BhY2UgbWludCB7CiAgQGNvbXBvbmVudCBsb2FkbW9yZSB7CiAgICBvdmVyZmxvdzogaGlkZGVuOwoKICAgIEBkZXNjZW5kZW50IGNvbnRlbnQgewogICAgICBAd2hlbiBkcm9wcGVkIHsKICAgICAgICB0cmFuc2l0aW9uOiAuMnM7CiAgICAgIH0KICAgIH0KCiAgICBAZGVzY2VuZGVudCB0b3AsIGJvdHRvbSB7CiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgaGVpZ2h0OiA1MHB4OwogICAgICBsaW5lLWhlaWdodDogNTBweDsKICAgIH0KCiAgICBAZGVzY2VuZGVudCB0b3AgewogICAgICBtYXJnaW4tdG9wOiAtNTBweDsKICAgIH0KCiAgICBAZGVzY2VuZGVudCBib3R0b20gewogICAgICBtYXJnaW4tYm90dG9tOiAtNTBweDsKICAgIH0KCiAgICBAZGVzY2VuZGVudCBzcGlubmVyIHsKICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogICAgICBtYXJnaW4tcmlnaHQ6IDVweDsKICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTsKICAgIH0KCiAgICBAZGVzY2VuZGVudCB0ZXh0IHsKICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTsKICAgIH0KICB9Cn0K"},{"version":3,"sources":["loadmore.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAqBA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"loadmore.vue","sourceRoot":"node_modules/mint-ui/packages/loadmore/src","sourcesContent":["<template>\n  <div class=\"mint-loadmore\">\n    <div class=\"mint-loadmore-content\" :class=\"{ 'is-dropped': topDropped || bottomDropped}\" :style=\"{ 'transform': transform }\">\n      <slot name=\"top\">\n        <div class=\"mint-loadmore-top\" v-if=\"topMethod\">\n          <spinner v-if=\"topStatus === 'loading'\" class=\"mint-loadmore-spinner\" :size=\"20\" type=\"fading-circle\"></spinner>\n          <span class=\"mint-loadmore-text\">{{ topText }}</span>\n        </div>\n      </slot>\n      <slot></slot>\n      <slot name=\"bottom\">\n        <div class=\"mint-loadmore-bottom\" v-if=\"bottomMethod\">\n          <spinner v-if=\"bottomStatus === 'loading'\" class=\"mint-loadmore-spinner\" :size=\"20\" type=\"fading-circle\"></spinner>\n          <span class=\"mint-loadmore-text\">{{ bottomText }}</span>\n        </div>\n      </slot>\n    </div>\n  </div>\n</template>\n\n<style>\n  @component-namespace mint {\n    @component loadmore {\n      overflow: hidden;\n\n      @descendent content {\n        @when dropped {\n          transition: .2s;\n        }\n      }\n\n      @descendent top, bottom {\n        text-align: center;\n        height: 50px;\n        line-height: 50px;\n      }\n\n      @descendent top {\n        margin-top: -50px;\n      }\n\n      @descendent bottom {\n        margin-bottom: -50px;\n      }\n\n      @descendent spinner {\n        display: inline-block;\n        margin-right: 5px;\n        vertical-align: middle;\n      }\n\n      @descendent text {\n        vertical-align: middle;\n      }\n    }\n  }\n</style>\n\n<script type=\"text/babel\">\n  import spinner from 'mint-ui/packages/spinner/src/spinner/fading-circle.vue';\n  export default {\n    name: 'mt-loadmore',\n    components: {\n      'spinner': spinner\n    },\n\n    props: {\n      maxDistance: {\n        type: Number,\n        default: 0\n      },\n      autoFill: {\n        type: Boolean,\n        default: true\n      },\n      distanceIndex: {\n        type: Number,\n        default: 2\n      },\n      topPullText: {\n        type: String,\n        default: '下拉刷新'\n      },\n      topDropText: {\n        type: String,\n        default: '释放更新'\n      },\n      topLoadingText: {\n        type: String,\n        default: '加载中...'\n      },\n      topDistance: {\n        type: Number,\n        default: 70\n      },\n      topMethod: {\n        type: Function\n      },\n      bottomPullText: {\n        type: String,\n        default: '上拉刷新'\n      },\n      bottomDropText: {\n        type: String,\n        default: '释放更新'\n      },\n      bottomLoadingText: {\n        type: String,\n        default: '加载中...'\n      },\n      bottomDistance: {\n        type: Number,\n        default: 70\n      },\n      bottomMethod: {\n        type: Function\n      },\n      bottomAllLoaded: {\n        type: Boolean,\n        default: false\n      }\n    },\n\n    data() {\n      return {\n        translate: 0,\n        scrollEventTarget: null,\n        containerFilled: false,\n        topText: '',\n        topDropped: false,\n        bottomText: '',\n        bottomDropped: false,\n        bottomReached: false,\n        direction: '',\n        startY: 0,\n        startScrollTop: 0,\n        currentY: 0,\n        topStatus: '',\n        bottomStatus: ''\n      };\n    },\n\n    computed: {\n      transform() {\n        return this.translate === 0 ? null : 'translate3d(0, ' + this.translate + 'px, 0)';\n      }\n    },\n\n    watch: {\n      topStatus(val) {\n        this.$emit('top-status-change', val);\n        switch (val) {\n          case 'pull':\n            this.topText = this.topPullText;\n            break;\n          case 'drop':\n            this.topText = this.topDropText;\n            break;\n          case 'loading':\n            this.topText = this.topLoadingText;\n            break;\n        }\n      },\n\n      bottomStatus(val) {\n        this.$emit('bottom-status-change', val);\n        switch (val) {\n          case 'pull':\n            this.bottomText = this.bottomPullText;\n            break;\n          case 'drop':\n            this.bottomText = this.bottomDropText;\n            break;\n          case 'loading':\n            this.bottomText = this.bottomLoadingText;\n            break;\n        }\n      }\n    },\n\n    methods: {\n      onTopLoaded() {\n        this.translate = 0;\n        setTimeout(() => {\n          this.topStatus = 'pull';\n        }, 200);\n      },\n\n      onBottomLoaded() {\n        this.bottomStatus = 'pull';\n        this.bottomDropped = false;\n        this.$nextTick(() => {\n          if (this.scrollEventTarget === window) {\n            document.body.scrollTop += 50;\n          } else {\n            this.scrollEventTarget.scrollTop += 50;\n          }\n          this.translate = 0;\n        });\n        if (!this.bottomAllLoaded && !this.containerFilled) {\n          this.fillContainer();\n        }\n      },\n\n      getScrollEventTarget(element) {\n        let currentNode = element;\n        while (currentNode && currentNode.tagName !== 'HTML' &&\n          currentNode.tagName !== 'BODY' && currentNode.nodeType === 1) {\n          let overflowY = document.defaultView.getComputedStyle(currentNode).overflowY;\n          if (overflowY === 'scroll' || overflowY === 'auto') {\n            return currentNode;\n          }\n          currentNode = currentNode.parentNode;\n        }\n        return window;\n      },\n\n      getScrollTop(element) {\n        if (element === window) {\n          return Math.max(window.pageYOffset || 0, document.documentElement.scrollTop);\n        } else {\n          return element.scrollTop;\n        }\n      },\n\n      bindTouchEvents() {\n        this.$el.addEventListener('touchstart', this.handleTouchStart);\n        this.$el.addEventListener('touchmove', this.handleTouchMove);\n        this.$el.addEventListener('touchend', this.handleTouchEnd);\n      },\n\n      init() {\n        this.topStatus = 'pull';\n        this.bottomStatus = 'pull';\n        this.topText = this.topPullText;\n        this.scrollEventTarget = this.getScrollEventTarget(this.$el);\n        if (typeof this.bottomMethod === 'function') {\n          this.fillContainer();\n          this.bindTouchEvents();\n        }\n        if (typeof this.topMethod === 'function') {\n          this.bindTouchEvents();\n        }\n      },\n\n      fillContainer() {\n        if (this.autoFill) {\n          this.$nextTick(() => {\n            if (this.scrollEventTarget === window) {\n              this.containerFilled = this.$el.getBoundingClientRect().bottom >=\n                document.documentElement.getBoundingClientRect().bottom;\n            } else {\n              this.containerFilled = this.$el.getBoundingClientRect().bottom >=\n                this.scrollEventTarget.getBoundingClientRect().bottom;\n            }\n            if (!this.containerFilled) {\n              this.bottomStatus = 'loading';\n              this.bottomMethod();\n            }\n          });\n        }\n      },\n\n      checkBottomReached() {\n        if (this.scrollEventTarget === window) {\n          return document.body.scrollTop + document.documentElement.clientHeight >= document.body.scrollHeight;\n        } else {\n          return this.$el.getBoundingClientRect().bottom <= this.scrollEventTarget.getBoundingClientRect().bottom + 1;\n        }\n      },\n\n      handleTouchStart(event) {\n        this.startY = event.touches[0].clientY;\n        this.startScrollTop = this.getScrollTop(this.scrollEventTarget);\n        this.bottomReached = false;\n        if (this.topStatus !== 'loading') {\n          this.topStatus = 'pull';\n          this.topDropped = false;\n        }\n        if (this.bottomStatus !== 'loading') {\n          this.bottomStatus = 'pull';\n          this.bottomDropped = false;\n        }\n      },\n\n      handleTouchMove(event) {\n        if (this.startY < this.$el.getBoundingClientRect().top && this.startY > this.$el.getBoundingClientRect().bottom) {\n          return;\n        }\n        this.currentY = event.touches[0].clientY;\n        let distance = (this.currentY - this.startY) / this.distanceIndex;\n        this.direction = distance > 0 ? 'down' : 'up';\n        if (typeof this.topMethod === 'function' && this.direction === 'down' &&\n          this.getScrollTop(this.scrollEventTarget) === 0 && this.topStatus !== 'loading') {\n          event.preventDefault();\n          event.stopPropagation();\n          if (this.maxDistance > 0) {\n            this.translate = distance <= this.maxDistance ? distance - this.startScrollTop : this.translate;\n          } else {\n            this.translate = distance - this.startScrollTop;\n          }\n          if (this.translate < 0) {\n            this.translate = 0;\n          }\n          this.topStatus = this.translate >= this.topDistance ? 'drop' : 'pull';\n        }\n\n        if (this.direction === 'up') {\n          this.bottomReached = this.bottomReached || this.checkBottomReached();\n        }\n        if (typeof this.bottomMethod === 'function' && this.direction === 'up' &&\n          this.bottomReached && this.bottomStatus !== 'loading' && !this.bottomAllLoaded) {\n          event.preventDefault();\n          event.stopPropagation();\n          if (this.maxDistance > 0) {\n            this.translate = Math.abs(distance) <= this.maxDistance\n              ? this.getScrollTop(this.scrollEventTarget) - this.startScrollTop + distance : this.translate;\n          } else {\n            this.translate = this.getScrollTop(this.scrollEventTarget) - this.startScrollTop + distance;\n          }\n          if (this.translate > 0) {\n            this.translate = 0;\n          }\n          this.bottomStatus = -this.translate >= this.bottomDistance ? 'drop' : 'pull';\n        }\n        this.$emit('translate-change', this.translate);\n      },\n\n      handleTouchEnd() {\n        if (this.direction === 'down' && this.getScrollTop(this.scrollEventTarget) === 0 && this.translate > 0) {\n          this.topDropped = true;\n          if (this.topStatus === 'drop') {\n            this.translate = '50';\n            this.topStatus = 'loading';\n            this.topMethod();\n          } else {\n            this.translate = '0';\n            this.topStatus = 'pull';\n          }\n        }\n        if (this.direction === 'up' && this.bottomReached && this.translate < 0) {\n          this.bottomDropped = true;\n          this.bottomReached = false;\n          if (this.bottomStatus === 'drop') {\n            this.translate = '-50';\n            this.bottomStatus = 'loading';\n            this.bottomMethod();\n          } else {\n            this.translate = '0';\n            this.bottomStatus = 'pull';\n          }\n        }\n        this.$emit('translate-change', this.translate);\n        this.direction = '';\n      }\n    },\n\n    mounted() {\n      this.init();\n    }\n  };\n</script>"]}]}