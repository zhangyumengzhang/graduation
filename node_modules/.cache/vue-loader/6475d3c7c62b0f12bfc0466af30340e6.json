{"remainingRequest":"D:\\2021graduate\\graduation\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\2021graduate\\graduation\\node_modules\\mint-ui\\packages\\cell-swipe\\src\\cell-swipe.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"D:\\2021graduate\\graduation\\node_modules\\mint-ui\\packages\\cell-swipe\\src\\cell-swipe.vue","mtime":1611497133402},{"path":"D:\\2021graduate\\graduation\\node_modules\\css-loader\\dist\\cjs.js","mtime":1594033219529},{"path":"D:\\2021graduate\\graduation\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1594033220124},{"path":"D:\\2021graduate\\graduation\\node_modules\\postcss-loader\\src\\index.js","mtime":1594033219961},{"path":"D:\\2021graduate\\graduation\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1594033213228},{"path":"D:\\2021graduate\\graduation\\node_modules\\vue-loader\\lib\\index.js","mtime":1594033220124}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCkBpbXBvcnQgIi4uLy4uLy4uL3NyYy9zdHlsZS92YXIuY3NzIjsKCkBjb21wb25lbnQtbmFtZXNwYWNlIG1pbnQgewogIEBjb21wb25lbnQgY2VsbC1zd2lwZSB7CiAgICBAZGVzY2VuZGVudCBidXR0b25ncm91cCB7CiAgICAgIGhlaWdodDogMTAwJTsKICAgIH0KCiAgICBAZGVzY2VuZGVudCBidXR0b24gewogICAgICBoZWlnaHQ6IDEwMCU7CiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICAgICAgcGFkZGluZzogMCAxMHB4OwogICAgICBsaW5lLWhlaWdodDogNDhweDsKICAgIH0KCiAgICAubWludC1jZWxsLXdyYXBwZXIgewogICAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICB9CgogICAgLm1pbnQtY2VsbC13cmFwcGVyLAogICAgLm1pbnQtY2VsbC1sZWZ0LAogICAgLm1pbnQtY2VsbC1yaWdodCB7CiAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAxNTBtcyBlYXNlLWluLW91dDsKICAgIH0KICB9Cn0K"},{"version":3,"sources":["cell-swipe.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqOA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"cell-swipe.vue","sourceRoot":"node_modules/mint-ui/packages/cell-swipe/src","sourcesContent":["<template>\n  <x-cell\n    v-clickoutside:touchstart=\"swipeMove\"\n    @click.native=\"swipeMove()\"\n    @touchstart.native=\"startDrag\"\n    @touchmove.native=\"onDrag\"\n    @touchend.native=\"endDrag\"\n    class=\"mint-cell-swipe\"\n    :title=\"title\"\n    :icon=\"icon\"\n    :label=\"label\"\n    :to=\"to\"\n    :is-link=\"isLink\"\n    ref=\"cell\"\n    :value=\"value\">\n    <div\n      slot=\"right\"\n      class=\"mint-cell-swipe-buttongroup\"\n      ref=\"right\">\n      <a\n        class=\"mint-cell-swipe-button\"\n        v-for=\"btn in right\"\n        :style=\"btn.style\"\n        @click.prevent.stop=\"btn.handler && btn.handler(), swipeMove()\"\n        v-html=\"btn.content\"></a>\n    </div>\n    <div\n      slot=\"left\"\n      class=\"mint-cell-swipe-buttongroup\"\n      ref=\"left\">\n      <a\n        class=\"mint-cell-swipe-button\"\n        v-for=\"btn in left\"\n        :style=\"btn.style\"\n        @click.prevent.stop=\"btn.handler && btn.handler(), swipeMove()\"\n        v-html=\"btn.content\"></a>\n    </div>\n    <slot></slot>\n    <span\n      v-if=\"$slots.title\"\n      slot=\"title\">\n      <slot name=\"title\"></slot>\n    </span>\n    <span\n      v-if=\"$slots.icon\"\n      slot=\"icon\">\n      <slot name=\"icon\"></slot>\n    </span>\n  </x-cell>\n</template>\n\n<script>\nimport { once } from 'mint-ui/src/utils/dom';\nimport XCell from 'mint-ui/packages/cell/index.js';\nimport Clickoutside from 'mint-ui/src/utils/clickoutside';\nif (process.env.NODE_ENV === 'component') {\n  require('mint-ui/packages/cell/style.css');\n}\n\n/**\n * mt-cell-swipe\n * @desc 类似 iOS 滑动 Cell 的效果\n * @module components/cell-swipe\n *\n * @example\n * <mt-cell-swipe\n *   :left=[\n *     {\n *       content: 'text',\n *       style: {color: 'white', backgroundColor: 'red'},\n *       handler(e) => console.log(123)\n *     }\n *   ]\n *   :right=[{ content: 'allowed HTML' }]>\n *   swipe me\n * </mt-cell-swipe>\n */\nexport default {\n  name: 'mt-cell-swipe',\n\n  components: { XCell },\n\n  directives: { Clickoutside },\n\n  props: {\n    to: String,\n    left: Array,\n    right: Array,\n    icon: String,\n    title: String,\n    label: String,\n    isLink: Boolean,\n    value: {}\n  },\n\n  data() {\n    return {\n      start: { x: 0, y: 0 }\n    };\n  },\n\n  mounted() {\n    this.wrap = this.$refs.cell.$el.querySelector('.mint-cell-wrapper');\n    this.leftElm = this.$refs.left;\n    this.rightElm = this.$refs.right;\n    this.leftWrapElm = this.leftElm.parentNode;\n    this.rightWrapElm = this.rightElm.parentNode;\n    this.leftWidth = this.leftElm.getBoundingClientRect().width;\n    this.rightWidth = this.rightElm.getBoundingClientRect().width;\n\n    this.leftDefaultTransform = this.translate3d(-this.leftWidth - 1);\n    this.rightDefaultTransform = this.translate3d(this.rightWidth);\n\n    this.rightWrapElm.style.webkitTransform = this.rightDefaultTransform;\n    this.leftWrapElm.style.webkitTransform = this.leftDefaultTransform;\n  },\n\n  methods: {\n    resetSwipeStatus() {\n      this.swiping = false;\n      this.opened = true;\n      this.offsetLeft = 0;\n    },\n\n    translate3d(offset) {\n      return `translate3d(${offset}px, 0, 0)`;\n    },\n\n    setAnimations(val) {\n      this.wrap.style.transitionDuration = val;\n      this.rightWrapElm.style.transitionDuration = val;\n      this.leftWrapElm.style.transitionDuration = val;\n    },\n\n    swipeMove(offset = 0) {\n      this.wrap.style.webkitTransform = this.translate3d(offset);\n      this.rightWrapElm.style.webkitTransform = this.translate3d(this.rightWidth + offset);\n      this.leftWrapElm.style.webkitTransform = this.translate3d(-this.leftWidth + offset);\n      offset && (this.swiping = true);\n    },\n\n    swipeLeaveTransition(direction) {\n      setTimeout(() => {\n        this.swipeLeave = true;\n\n        // left\n        if (direction > 0 && -this.offsetLeft > this.rightWidth * 0.4) {\n          this.swipeMove(-this.rightWidth);\n          this.resetSwipeStatus();\n          return;\n        // right\n        } else if (direction < 0 && this.offsetLeft > this.leftWidth * 0.4) {\n          this.swipeMove(this.leftWidth);\n          this.resetSwipeStatus();\n          return;\n        }\n\n        this.swipeMove(0);\n        once(this.wrap, 'webkitTransitionEnd', _ => {\n          this.wrap.style.webkitTransform = '';\n          this.rightWrapElm.style.webkitTransform = this.rightDefaultTransform;\n          this.leftWrapElm.style.webkitTransform = this.leftDefaultTransform;\n          this.swipeLeave = false;\n          this.swiping = false;\n        });\n      }, 0);\n    },\n\n    startDrag(evt) {\n      evt = evt.changedTouches ? evt.changedTouches[0] : evt;\n      this.dragging = true;\n      this.start.x = evt.pageX;\n      this.start.y = evt.pageY;\n      this.direction = '';\n    },\n\n    onDrag(evt) {\n      if (this.opened) {\n        if (!this.swiping) {\n          this.swipeMove(0);\n          this.setAnimations('');\n        }\n        this.opened = false;\n        return;\n      }\n      if (!this.dragging) return;\n\n      let swiping;\n      const e = evt.changedTouches ? evt.changedTouches[0] : evt;\n      const offsetTop = e.pageY - this.start.y;\n      const offsetLeft = this.offsetLeft = e.pageX - this.start.x;\n\n      const y = Math.abs(offsetTop);\n      const x = Math.abs(offsetLeft);\n\n      this.setAnimations('0ms');\n\n      if (this.direction === '') {\n        this.direction = x > y ? 'horizonal' : 'vertical';\n      }\n\n      if (this.direction === 'horizonal') {\n        evt.preventDefault();\n        evt.stopPropagation();\n\n        swiping = !(x < 5 || (x >= 5 && y >= x * 1.73));\n        if (!swiping) return;\n\n        if ((offsetLeft < 0 && -offsetLeft > this.rightWidth) ||\n          (offsetLeft > 0 && offsetLeft > this.leftWidth) ||\n          (offsetLeft > 0 && !this.leftWidth) ||\n          (offsetLeft < 0 && !this.rightWidth)) {\n        } else {\n          this.swipeMove(offsetLeft);\n        }\n      }\n    },\n\n    endDrag() {\n      this.direction = '';\n      this.setAnimations('');\n      if (!this.swiping) return;\n      this.swipeLeaveTransition(this.offsetLeft > 0 ? -1 : 1);\n    }\n  }\n};\n</script>\n\n<style lang=\"css\">\n  @import \"../../../src/style/var.css\";\n\n  @component-namespace mint {\n    @component cell-swipe {\n      @descendent buttongroup {\n        height: 100%;\n      }\n\n      @descendent button {\n        height: 100%;\n        display: inline-block;\n        padding: 0 10px;\n        line-height: 48px;\n      }\n\n      .mint-cell-wrapper {\n        position: relative;\n      }\n\n      .mint-cell-wrapper,\n      .mint-cell-left,\n      .mint-cell-right {\n        transition: transform 150ms ease-in-out;\n      }\n    }\n  }\n</style>\n"]}]}