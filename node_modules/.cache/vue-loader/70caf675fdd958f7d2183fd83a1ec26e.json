{"remainingRequest":"D:\\2021graduate\\graduation\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\2021graduate\\graduation\\node_modules\\mint-ui\\packages\\picker\\src\\picker-slot.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"D:\\2021graduate\\graduation\\node_modules\\mint-ui\\packages\\picker\\src\\picker-slot.vue","mtime":1611497133402},{"path":"D:\\2021graduate\\graduation\\node_modules\\css-loader\\dist\\cjs.js","mtime":1594033219529},{"path":"D:\\2021graduate\\graduation\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1594033220124},{"path":"D:\\2021graduate\\graduation\\node_modules\\postcss-loader\\src\\index.js","mtime":1594033219961},{"path":"D:\\2021graduate\\graduation\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1594033213228},{"path":"D:\\2021graduate\\graduation\\node_modules\\vue-loader\\lib\\index.js","mtime":1594033220124}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKLnBpY2tlci1zbG90IHsKICBmb250LXNpemU6IDE4cHg7CiAgb3ZlcmZsb3c6IGhpZGRlbjsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgbWF4LWhlaWdodDogMTAwJQp9CgoucGlja2VyLXNsb3QucGlja2VyLXNsb3QtbGVmdCB7CiAgdGV4dC1hbGlnbjogbGVmdDsKfQoKLnBpY2tlci1zbG90LnBpY2tlci1zbG90LWNlbnRlciB7CiAgdGV4dC1hbGlnbjogY2VudGVyOwp9CgoucGlja2VyLXNsb3QucGlja2VyLXNsb3QtcmlnaHQgewogIHRleHQtYWxpZ246IHJpZ2h0Owp9CgoucGlja2VyLXNsb3QucGlja2VyLXNsb3QtZGl2aWRlciB7CiAgY29sb3I6ICMwMDA7CiAgZGlzcGxheTogZmxleDsKICBhbGlnbi1pdGVtczogY2VudGVyCn0KCi5waWNrZXItc2xvdC13cmFwcGVyIHsKICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjNzOwogIHRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLW91dDsKICBiYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW47Cn0KCi5waWNrZXItc2xvdC13cmFwcGVyLmRyYWdnaW5nLAoucGlja2VyLXNsb3Qtd3JhcHBlci5kcmFnZ2luZyAucGlja2VyLWl0ZW0gewogIHRyYW5zaXRpb24tZHVyYXRpb246IDBzOwp9CgoucGlja2VyLWl0ZW0gewogIGhlaWdodDogMzZweDsKICBsaW5lLWhlaWdodDogMzZweDsKICBwYWRkaW5nOiAwIDEwcHg7CiAgd2hpdGUtc3BhY2U6IG5vd3JhcDsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgb3ZlcmZsb3c6IGhpZGRlbjsKICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpczsKICBjb2xvcjogIzcwNzI3NDsKICBsZWZ0OiAwOwogIHRvcDogMDsKICB3aWR0aDogMTAwJTsKICBib3gtc2l6aW5nOiBib3JkZXItYm94OwogIHRyYW5zaXRpb24tZHVyYXRpb246IC4zczsKICBiYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW47Cn0KCi5waWNrZXItc2xvdC1hYnNvbHV0ZSAucGlja2VyLWl0ZW0gewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKfQoKLnBpY2tlci1pdGVtLnBpY2tlci1pdGVtLWZhciB7CiAgcG9pbnRlci1ldmVudHM6IG5vbmUKfQoKLnBpY2tlci1pdGVtLnBpY2tlci1zZWxlY3RlZCB7CiAgY29sb3I6ICMwMDA7CiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKSByb3RhdGVYKDApOwp9CgoucGlja2VyLTNkIC5waWNrZXItaXRlbXMgewogIG92ZXJmbG93OiBoaWRkZW47CiAgcGVyc3BlY3RpdmU6IDcwMHB4Owp9CgoucGlja2VyLTNkIC5waWNrZXItaXRlbSwKLnBpY2tlci0zZCAucGlja2VyLXNsb3QsCi5waWNrZXItM2QgLnBpY2tlci1zbG90LXdyYXBwZXIgewogIHRyYW5zZm9ybS1zdHlsZTogcHJlc2VydmUtM2QKfQoKLnBpY2tlci0zZCAucGlja2VyLXNsb3QgewogIG92ZXJmbG93OiB2aXNpYmxlCn0KCi5waWNrZXItM2QgLnBpY2tlci1pdGVtIHsKICB0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXIgY2VudGVyOwogIGJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjsKICB0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1vdXQKfQo="},{"version":3,"sources":["picker-slot.vue"],"names":[],"mappings":";;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"picker-slot.vue","sourceRoot":"node_modules/mint-ui/packages/picker/src","sourcesContent":["<template>\n  <div class=\"picker-slot\" :class=\"classNames\" :style=\"flexStyle\">\n    <div v-if=\"!divider\" ref=\"wrapper\" class=\"picker-slot-wrapper\" :class=\"{ dragging: dragging }\" :style=\"{ height: contentHeight + 'px' }\">\n      <div class=\"picker-item\" v-for=\"itemValue in mutatingValues\" :class=\"{ 'picker-selected': itemValue === currentValue }\" :style=\"{ height: itemHeight + 'px', lineHeight: itemHeight + 'px' }\">\n        {{ typeof itemValue === 'object' && itemValue[valueKey] ? itemValue[valueKey] : itemValue }}\n      </div>\n    </div>\n    <div v-if=\"divider\">{{ content }}</div>\n  </div>\n</template>\n\n<style>\n  .picker-slot {\n    font-size: 18px;\n    overflow: hidden;\n    position: relative;\n    max-height: 100%\n  }\n\n  .picker-slot.picker-slot-left {\n    text-align: left;\n  }\n\n  .picker-slot.picker-slot-center {\n    text-align: center;\n  }\n\n  .picker-slot.picker-slot-right {\n    text-align: right;\n  }\n\n  .picker-slot.picker-slot-divider {\n    color: #000;\n    display: flex;\n    align-items: center\n  }\n\n  .picker-slot-wrapper {\n    transition-duration: 0.3s;\n    transition-timing-function: ease-out;\n    backface-visibility: hidden;\n  }\n\n  .picker-slot-wrapper.dragging,\n  .picker-slot-wrapper.dragging .picker-item {\n    transition-duration: 0s;\n  }\n\n  .picker-item {\n    height: 36px;\n    line-height: 36px;\n    padding: 0 10px;\n    white-space: nowrap;\n    position: relative;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    color: #707274;\n    left: 0;\n    top: 0;\n    width: 100%;\n    box-sizing: border-box;\n    transition-duration: .3s;\n    backface-visibility: hidden;\n  }\n\n  .picker-slot-absolute .picker-item {\n    position: absolute;\n  }\n\n  .picker-item.picker-item-far {\n    pointer-events: none\n  }\n\n  .picker-item.picker-selected {\n    color: #000;\n    transform: translate3d(0, 0, 0) rotateX(0);\n  }\n\n  .picker-3d .picker-items {\n    overflow: hidden;\n    perspective: 700px;\n  }\n\n  .picker-3d .picker-item,\n  .picker-3d .picker-slot,\n  .picker-3d .picker-slot-wrapper {\n    transform-style: preserve-3d\n  }\n\n  .picker-3d .picker-slot {\n    overflow: visible\n  }\n\n  .picker-3d .picker-item {\n    transform-origin: center center;\n    backface-visibility: hidden;\n    transition-timing-function: ease-out\n  }\n</style>\n\n<script type=\"text/babel\">\n  import draggable from './draggable';\n  import translateUtil from './translate';\n  import { once, addClass, removeClass } from 'mint-ui/src/utils/dom';\n  import emitter from 'mint-ui/src/mixins/emitter';\n  import Vue from 'vue';\n  if (!Vue.prototype.$isServer) {\n    require('raf.js');\n  }\n\n  var rotateElement = function(element, angle) {\n    if (!element) return;\n    var transformProperty = translateUtil.transformProperty;\n\n    element.style[transformProperty] = element.style[transformProperty].replace(/rotateX\\(.+?deg\\)/gi, '') + ` rotateX(${angle}deg)`;\n  };\n\n  const ITEM_HEIGHT = 36;\n  const VISIBLE_ITEMS_ANGLE_MAP = {\n    3: -45,\n    5: -20,\n    7: -15\n  };\n\n  export default {\n    name: 'picker-slot',\n\n    props: {\n      values: {\n        type: Array,\n        default() {\n          return [];\n        }\n      },\n      value: {},\n      visibleItemCount: {\n        type: Number,\n        default: 5\n      },\n      valueKey: String,\n      rotateEffect: {\n        type: Boolean,\n        default: false\n      },\n      divider: {\n        type: Boolean,\n        default: false\n      },\n      textAlign: {\n        type: String,\n        default: 'center'\n      },\n      flex: {},\n      className: {},\n      content: {},\n      itemHeight: {\n        type: Number,\n        default: ITEM_HEIGHT\n      },\n      defaultIndex: {\n        type: Number,\n        default: 0,\n        require: false\n      }\n    },\n\n    data() {\n      return {\n        currentValue: this.value,\n        mutatingValues: this.values,\n        dragging: false,\n        animationFrameId: null\n      };\n    },\n\n    mixins: [emitter],\n\n    computed: {\n      flexStyle() {\n        return {\n          'flex': this.flex,\n          '-webkit-box-flex': this.flex,\n          '-moz-box-flex': this.flex,\n          '-ms-flex': this.flex\n        };\n      },\n      classNames() {\n        const PREFIX = 'picker-slot-';\n        let resultArray = [];\n\n        if (this.rotateEffect) {\n          resultArray.push(PREFIX + 'absolute');\n        }\n\n        let textAlign = this.textAlign || 'center';\n        resultArray.push(PREFIX + textAlign);\n\n        if (this.divider) {\n          resultArray.push(PREFIX + 'divider');\n        }\n\n        if (this.className) {\n          resultArray.push(this.className);\n        }\n\n        return resultArray.join(' ');\n      },\n      contentHeight() {\n        return this.itemHeight * this.visibleItemCount;\n      },\n      valueIndex() {\n        var valueKey = this.valueKey;\n        if (this.currentValue instanceof Object) {\n          for (var i = 0, len = this.mutatingValues.length; i < len ; i++) {\n            if (this.currentValue[valueKey] === this.mutatingValues[i][valueKey]) {\n              return i;\n            }\n          }\n          return -1;\n        } else {\n          return this.mutatingValues.indexOf(this.currentValue);\n        }\n      },\n      dragRange() {\n        var values = this.mutatingValues;\n        var visibleItemCount = this.visibleItemCount;\n        var itemHeight = this.itemHeight;\n\n        return [ -itemHeight * (values.length - Math.ceil(visibleItemCount / 2)), itemHeight * Math.floor(visibleItemCount / 2) ];\n      },\n      minTranslateY() {\n        return this.itemHeight * (Math.ceil(this.visibleItemCount / 2) - this.mutatingValues.length);\n      },\n      maxTranslateY() {\n        return this.itemHeight * Math.floor(this.visibleItemCount / 2);\n      }\n    },\n\n    methods: {\n      value2Translate(value) {\n        var values = this.mutatingValues;\n        var valueIndex = values.indexOf(value);\n        var offset = Math.floor(this.visibleItemCount / 2);\n        var itemHeight = this.itemHeight;\n\n        if (valueIndex !== -1) {\n          return (valueIndex - offset) * -itemHeight;\n        }\n      },\n\n      translate2Value(translate) {\n        var itemHeight = this.itemHeight;\n        translate = Math.round(translate / itemHeight) * itemHeight;\n        var index = -(translate - Math.floor(this.visibleItemCount / 2) * itemHeight) / itemHeight;\n\n        return this.mutatingValues[index];\n      },\n\n      updateRotate: function(currentTranslate, pickerItems) {\n        if (this.divider) return;\n        var dragRange = this.dragRange;\n        var wrapper = this.$refs.wrapper;\n\n        if (!pickerItems) {\n          pickerItems = wrapper.querySelectorAll('.picker-item');\n        }\n\n        if (currentTranslate === undefined) {\n          currentTranslate = translateUtil.getElementTranslate(wrapper).top;\n        }\n\n        var itemsFit = Math.ceil(this.visibleItemCount / 2);\n        var angleUnit = VISIBLE_ITEMS_ANGLE_MAP[this.visibleItemCount] || -20;\n\n        [].forEach.call(pickerItems, (item, index) => {\n          var itemOffsetTop = index * this.itemHeight;\n          var translateOffset = dragRange[1] - currentTranslate;\n          var itemOffset = itemOffsetTop - translateOffset;\n          var percentage = itemOffset / this.itemHeight;\n\n          var angle = angleUnit * percentage;\n          if (angle > 180) angle = 180;\n          if (angle < -180) angle = -180;\n\n          rotateElement(item, angle);\n\n          if (Math.abs(percentage) > itemsFit) {\n            addClass(item, 'picker-item-far');\n          } else {\n            removeClass(item, 'picker-item-far');\n          }\n        });\n      },\n\n      planUpdateRotate: function() {\n        var el = this.$refs.wrapper;\n        cancelAnimationFrame(this.animationFrameId);\n\n        this.animationFrameId = requestAnimationFrame(() => {\n          this.updateRotate();\n        });\n\n        once(el, translateUtil.transitionEndProperty, () => {\n          cancelAnimationFrame(this.animationFrameId);\n          this.animationFrameId = null;\n        });\n      },\n\n      initEvents() {\n        var el = this.$refs.wrapper;\n        var dragState = {};\n\n        var velocityTranslate, prevTranslate, pickerItems;\n\n        draggable(el, {\n          start: (event) => {\n            cancelAnimationFrame(this.animationFrameId);\n            this.animationFrameId = null;\n            dragState = {\n              range: this.dragRange,\n              start: new Date(),\n              startLeft: event.pageX,\n              startTop: event.pageY,\n              startTranslateTop: translateUtil.getElementTranslate(el).top\n            };\n            pickerItems = el.querySelectorAll('.picker-item');\n          },\n\n          drag: (event) => {\n            this.dragging = true;\n\n            dragState.left = event.pageX;\n            dragState.top = event.pageY;\n\n            var deltaY = dragState.top - dragState.startTop;\n            var translate = dragState.startTranslateTop + deltaY;\n\n            translateUtil.translateElement(el, null, translate);\n\n            velocityTranslate = translate - prevTranslate || translate;\n\n            prevTranslate = translate;\n\n            if (this.rotateEffect) {\n              this.updateRotate(prevTranslate, pickerItems);\n            }\n          },\n\n          end: (event) => {\n            this.dragging = false;\n\n            var momentumRatio = 7;\n            var currentTranslate = translateUtil.getElementTranslate(el).top;\n            var duration = new Date() - dragState.start;\n            let distance = Math.abs(dragState.startTranslateTop - currentTranslate);\n            var itemHeight = this.itemHeight;\n            var visibleItemCount = this.visibleItemCount;\n\n            let rect, offset;\n            if (distance < 6) {\n              rect = this.$el.getBoundingClientRect();\n              offset = Math.floor((event.clientY - (rect.top + (visibleItemCount - 1) * itemHeight / 2)) / itemHeight) * itemHeight;\n\n              if (offset > this.maxTranslateY) {\n                offset = this.maxTranslateY;\n              }\n\n              velocityTranslate = 0;\n              currentTranslate -= offset;\n            }\n\n            var momentumTranslate;\n            if (duration < 300) {\n              momentumTranslate = currentTranslate + velocityTranslate * momentumRatio;\n            }\n\n            var dragRange = dragState.range;\n\n            this.$nextTick(() => {\n              var translate;\n              if (momentumTranslate) {\n                translate = Math.round(momentumTranslate / itemHeight) * itemHeight;\n              } else {\n                translate = Math.round(currentTranslate / itemHeight) * itemHeight;\n              }\n\n              translate = Math.max(Math.min(translate, dragRange[1]), dragRange[0]);\n\n              translateUtil.translateElement(el, null, translate);\n\n              this.currentValue = this.translate2Value(translate);\n\n              if (this.rotateEffect) {\n                this.planUpdateRotate();\n              }\n            });\n\n            dragState = {};\n          }\n        });\n      },\n\n      doOnValueChange() {\n        var value = this.currentValue;\n        var wrapper = this.$refs.wrapper;\n\n        translateUtil.translateElement(wrapper, null, this.value2Translate(value));\n      },\n\n      doOnValuesChange() {\n        var el = this.$el;\n        var items = el.querySelectorAll('.picker-item');\n        [].forEach.call(items, (item, index) => {\n          translateUtil.translateElement(item, null, this.itemHeight * index);\n        });\n        if (this.rotateEffect) {\n          this.planUpdateRotate();\n        }\n      }\n    },\n\n    mounted() {\n      this.ready = true;\n\n      if (!this.divider) {\n        this.initEvents();\n        this.doOnValueChange();\n      }\n\n      if (this.rotateEffect) {\n        this.doOnValuesChange();\n      }\n    },\n\n    watch: {\n      values(val) {\n        this.mutatingValues = val;\n      },\n\n      mutatingValues(val) {\n        if (this.valueIndex === -1) {\n          this.currentValue = (val || [])[0];\n        }\n        if (this.rotateEffect) {\n          this.$nextTick(() => {\n            this.doOnValuesChange();\n          });\n        }\n      },\n      currentValue(val) {\n        this.doOnValueChange();\n        if (this.rotateEffect) {\n          this.planUpdateRotate();\n        }\n        this.$emit('input', val);\n        this.dispatch('picker', 'slotValueChange', this);\n      },\n      defaultIndex(val) {\n        if ((this.mutatingValues[val] !== undefined) && (this.mutatingValues.length >= val + 1)) {\n          this.currentValue = this.mutatingValues[val];\n        }\n      }\n    }\n  };\n</script>\n"]}]}